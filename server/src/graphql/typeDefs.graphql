# CREANDO LOS TYPEDEF, estos son los tipos de definicion de mi shema,
# Tipos de datis en graphQl
#   ID,String,Int,Float,Boolean,Date
# si al final de la declaracion de un campo, usted encuentra un '!', entonces significa que es obliglatorio
scalar Upload

type User{
  id:ID
  name:String
  username:String
  email:String
  avatar:String
  siteWeb:String
  description:String
  password:String
  createAt:String
}

# Los input en graphQL nos sirven para indicar que vamos a recibir una entrada de datos

# Input para el registro de usuario 
input AuthCreateUser{
  name:String!
  username:String!
  email:String!
  password:String!
}

type Token{
  token:String
}
# Input para el Login de usuario
input AuthInputLogin{
  email:String!
  password:String!
}
type UpdateAvatar {
  status:Boolean,
  urlAvatar:String
}
input  UpdateUserInput{
  username:String
  email:String
  currentPassword:String
  newPassword:String
  siteWeb:String
  description:String
  name:String

}
# MIS SUBCRIPCIONES
type followSubscription{
  username:String
  followers:[User]
}


type Publish{
  status:Boolean
  urlFile:String
}

type Publications{
  id:ID
  idUser:ID
  file:String
  typeFile:String
  createAt:String
}
# Aqui dentro de Query todas mis querys 
type Query{
  # Un ejemplo aqui tenemos una query que se llama login y recibe como parametro el AuthInputLogin, y esta me devuelve el token
  login(input:AuthInputLogin):Token
  getUser(username:String):User
  search(search:String):[User]
  # FOLLOW 
  isFollow(username:String!):Boolean
  followers(username:String!):[User]
  followed(username:String!):[User]

  # Onbtener las publicaciones
  getPublications(username:String!):[Publications]
}



type Mutation{
  #Un ejemplo, aqui tenemos una mutacion que se llama register esta recibe como parametro el AuthCreateUser y devuelve un User
  register(input:AuthCreateUser):User
  updateAvatar(file:Upload):UpdateAvatar
  deleteAvatar:Boolean,
  updateUser(input:UpdateUserInput):Boolean
  # FOLLOWERS
  follow(username:String!):Boolean
  unFollow(username:String!):Boolean

  # PARA PUBLICATION
  publish(file:Upload):Publish
}
type Subscription {
  followers(username:String):followSubscription
}